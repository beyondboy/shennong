This document agregates various notes on the shennong development

* shennong-features
** Models to implement in shennong-features
*** features
- MFCC
- Filterbanks
- PLP
- BUT Bottleneck features
- 1 hot
*** post processing
- delta and delta2
- pitch
- energy
- VAD
- MVN, by wav or by speaker (i.e. a collection of wavs)
- VTLN
** Ideas for shennong-features implementation
All possible from Kaldi, using PyKaldi

- MFCC, filterbanks, PLP
- deltas, pitch, energy, MVN, VTLN

Adapt from BUT for bottleneck features and VAD


** specification
*** input
 a wav file (or a list of wav files). Restrict to mono, 16kHz,
 16 bits files only.

*** output for each wav
- matrix of features (rows are frames, columns are label)
- vector of labels (e.g. 13 * mffc + 2 * pitch + 13 * 13 * deltas + ...)
- self documentation:
  - command with parameters
  - softwares version
  - input files
  - creation date, machine and user

** Installation notes
*** Creation of a venv with pykaldi on oberon
#+BEGIN_SRC bash
    conda create -n shennong python=3.5
    conda activate shennong
    conda install scipy numpy ipython flake8 pytest pyparsing ninja
    pip install --upgrade pip
    pip install --upgrade setuptools

    git clone git@github.com:pykaldi/pykaldi.git
    cd pykaldi
    cd tools
    ./check_dependencies.sh

    # a tweak on oberon, use a decent version of aclocal (the default
    # /usr/local/bin/aclocal is too old, you can use another with
    # PATH=/usr/bin:$PATH). The same for gcc, need to use devtoolset-2.
    # But you need to run the ./install_protobuf.sh
    # step by step manually, tweaking the path when needed. Make sure
    # you are in the "shennong" venv all the time
    ./install_protobuf.sh

    # cmake2 is too old, a tweak again...
    sudo mv /usr/bin/cmake /usr/bin/cmake-old
    sudo ln -s /usr/bin/cmake3 /usr/bin/cmake
    ./install_clif.sh
    sudo rm /usr/bin/cmake
    sudo mv /usr/bin/cmake-old /usr/bin/cmake

    # here again you need to play with version of gcc...
    ./install_kaldi.sh

    cd ..
    python setup.py install
#+END_SRC
** Existing features extraction packages
*** features_extraction
- https://github.com/bootphon/features_extraction
- A wrapper on other packages (spectral and Matlab toolboxes)
- Implemented models
    - Implements **MFCC**, **Mel filterbanks**, **RASTA**, **lyon** and **drnl**
    - Depends on *spectral* for mel and MFCC
    - Depends on matlab/octave for RASTA, lyon and drnl
*** spectral
- https://github.com/bootphon/spectral
- Implement **MFCC** and **Mel filterbanks** (Python implementation)
- With **delta** and **delta-delta**
*** Kaldi
- https://github.com/kaldi-asr/kaldi
- Implement **MFCC**, **Mel filterbanks** and **PLP** (C++ implementation)
- With **delta**, **CMVN** and **pitch**.
*** BUT/Phonexia Bottleneck feature extractor
- http://speech.fit.vutbr.cz/software/but-phonexia-bottleneck-feature-extractor
- bottleneck, stacked bottleneck features and phoneme/senones posteriors
- also includes a **VAD**
*** HTK
- http://htk.eng.cam.ac.uk/
- Custom licence incompatible with GPL3, so we cannot use HTK in Shennong.
- Implement roughly the same features as Kaldi does.
